The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

Importing the function from the module:

	>>> matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Multiplying two matrices

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
	   [15, 22]])

Multiplying two matices 2

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

Multiplying two matrices 3

    >>> list1 = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    >>> list2 = [[1, -1, 2], [2, -1, 2], [3, -3, 0]]
    >>> matrix_mul(list1, list2)
    array([[ 30, -26,  10],
	   [ 36, -31,  14],
	   [ 42, -36,  18]])

Multiplying two matices 4

    >>> matrix_mul([[1, 5, 7]], [[3], [5], [8]])
    array([[84]])

		

Passing None as a matrix

    >>> matrix_mul(None, None)
    Traceback (most recent call last):
              ...
    ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

Passing None as a matrix

    >>> matrix_mul([[7, 12]], None)
    Traceback (most recent call last):
              ...
    ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)


Passing a tuple as a matrix

    >>> matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]])
    array([55.4])

Passing a string as a matrix

	>>> matrix_mul([[3, 3], [4, 4]], "Holberton")
	Traceback (most recent call last):
		  ...
	numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U9')) -> None

Passing a list of tuples

    >>> matrix_mul([(1, 5, 10)], [(1), (5)])
    Traceback (most recent call last):
	      ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)

Passing an empty matrix

    >>> matrix_mul([], ["Holberton"])
    Traceback (most recent call last):
              ...
    numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('float64'), dtype('<U9')) -> None

Passing an empty matrix

    >>> matrix_mul([], [[1]])
    Traceback (most recent call last):
              ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

Passing an empty matrix 2

    >>> matrix_mul([[1,2]], [[]])
    Traceback (most recent call last):
              ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

Passing a matrix with a list of strings

    >>> matrix_mul([[1, '1', 1], ['2', 2, '2']], [[3], [3]])
    Traceback (most recent call last):
	      ...
    numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None

Passing a matrix with list of string 2

    >>> matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    Traceback (most recent call last):
	      ...
    numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None

Passing a matrix with an empty list

    >>> matrix_mul([[12, 12, 12], [], [14, 14, 14]], [[2], [3], [8]])
    Traceback (most recent call last):
              ...
    ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

Passing a matrix which its row have different size

    >>> matrix_mul([[2, 2, 2], [4, 4, 4]], [[2], [3, 3]])
    Traceback (most recent call last):
	      ...
    ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

Passing two matrix that can't be multiplied

    >>> matrix_mul([[5, 2, 3], [7, 13, 2], [1, 0, 3]], [[2, 3], [6, 9]])
    Traceback (most recent call last):
                    ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)

Missing one argument

    >>> matrix_mul([[1, 2]])
    Traceback (most recent call last):
                    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Missing arguments

    >>> matrix_mul()
    Traceback (most recent call last):
		    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

For uneven m_a

    >>> matrix_mul([[1,2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

For uneven m_b
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

For too many args:
    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]])
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given

For normal use with ints and floats
    >>> print(matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]]))
    [[10.5 15.5 18.5]
     [22.5 33.5 40.5]]
