The ``100-matrix_mul`` module
======================

Using ``matrix_mul``
-------------------

Importing the function from the module:
	>>> matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Checking for module docstring:
	 >>> m = __import__("100-matrix_mul").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("100-matrix_mul").matrix_mul.__doc__
         >>> len(f) > 1
         True

Checking for no args:
	 >>> matrix_mul()
	 Traceback (most recent call last):
	 ...
	 TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Checking for one too few args:
	 >>> matrix_mul([[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Checking for too many args:
	 >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]])
	 Traceback (most recent call last):
	 ...
	 TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given

Checking for normal use with ints and floats:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]])
	 array([[10.5, 15.5, 18.5],
                [22.5, 33.5, 40.5]])



Checking for passing non-list as m_a:
	 >>> matrix_mul(None, [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

Checking for passing non-list to m_b:
	 >>> matrix_mul([[1, 2], [3, 4]], None)
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

Checking for passing list of tuples
	 >>> matrix_mul([(1, 5, 10)], [(1),(5)])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)

Checking for passing  a list of string
	 >>> matrix_mul([[]], ["Holbeton"])
	 Traceback (most recent call last):
	 ...
	 numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('float64'), dtype('<U8')) -> None

Checking for passing empty m_a:
	 >>> matrix_mul([], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

Checking for passing m_a with empty rows:
	 >>> matrix_mul([[], []], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

Checking for passing empty m_b:
	 >>> matrix_mul([[1, 2], [3, 4]], [])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

Checking for passing m_b with empty rows:
	 >>> matrix_mul([[1, 2], [3, 4]], [[]])
	 Traceback (most recent call last):
	 ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

Checking for uneven m_a:
	 >>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

Checking for uneven m_b:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
	 Traceback (most recent call last):
	 ...
	 ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

Checking for non-number in list in m_a:
	 >>> matrix_mul([[1, "Hello"], [3, 4]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 ...
	 numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None

Checking for non-number in list in m_b:
	 >>> matrix_mul([[1, 2], [3, 4]], [[1, "Hello"], [3, 4]])
	 Traceback (most recent call last):
	 	   ...
	 numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None
	 >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4,]])
	 Traceback (most recent call last):
	 	   ...
	 ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)
